####################################################################################################
# @file     .powerbashrc
# @brief    Personal defined bash configuration file for using it powerful.
#
# @author   sheer.rey<sheer.rey@gmail.com>
# @date     03/07/2025
# @version  0.0.1
####################################################################################################

# pre-defined functions

# check and display git branches
function git_branch {
    branch="$(git branch --no-color 2>/dev/null | grep '^\*' | sed -e 's/^\*\ //' | tr -d '()')"
    if [ "${branch}" != "" ]; then
        if [ "${branch}" = "no branch" ]; then
            branch="Hash $(git rev-parse --short HEAD)"
        fi
        echo "âŽ‡  $branch"
    fi
}

# check root user and display '#' or '$'
function check_root {
    if [ $UID -eq 0 ]; then
        echo "#"
    else
        echo "$"
    fi
}

# Yank to remote terminal via osc52 escape sequence.
function osc_yank {
    local func_name="osc_yank"
    local osc52_prefix="\033]52;c;"
    local osc52_suffix="\a"
    local tmux_prefix="\033Ptmux;\033"
    local tmux_suffix="\033\\"
    local max_lenth=74994
    local text=
    local lenth=

    local sopt=
    local lopt=
    local help_msg=$(cat <<!
Usage: $osc_yank [OPTION] [FILE] ...
Read from FILE or STDIN and yank to remote terminal via osc52 escape sequence.

Options:
    -h, --help      Show this message and exit.

Only supported in xterm now.

With no FILE supplied, read from standard input. If supplied FILE is a text file
and readable, read its content, otherwise read the value itself.

Using environment variable OSC_YANK_LENTH_MAX to specify the max character lenth
to be yank, default value is 74994.
!
)

    # check and show help message
    if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
        echo "$help_msg"
        return 0
    fi

    # check terminal type
    if [[ "$TERM" != xterm* && "$TERM" != tmux* && "$TERM" != screen* ]]; then
        echo "osc_yank only supported in xterm|tmux|screen now!"
        return 1
    fi

    # set escape sequence to paste through tmux/screen while it has been detected
    if [[ -n "$TMUX" || "$TERM" == tmux* || "$TERM" == screen* ]]; then
        osc52_prefix=${tmux_prefix}${osc52_prefix}
        osc52_suffix=${osc52_suffix}${tmux_suffix}
    fi

    # check environment variable
    if [ -n $OSC_YANK_LENTH_MAX ] && [[ "$OSC_YANK_LENTH_MAX" =~ ^[0-9]+$ ]]; then
        max_lenth=$OSC_YANK_LENTH_MAX
    fi

    # check input arguments
    if [ $# -gt 0 ]; then
        # if osc_yank has input arguments, iterate all of them
        for arg in "$@"; do
            # if input argument specified a readable text file,
            # read its content, otherwise read the value itself
            if file -- "$arg" | grep text >&/dev/null && [ -r "$arg" ]; then
                text+=$(cat "$arg")$'\n'
            else
                text+="$arg"$'\n'
            fi
        done
    else
        # if osc_yank has no input argument, read text from stdin, Ctrl+D to send eof
        local old_ifs=$IFS
        while IFS= read -r line; do
            text+="$line"$'\n'
        done
        IFS=$old_ifs
    fi

    # truncate multiple '\n' in the tail of variable 'text'
    text=$(echo "$text" | sed ':a;N;$!ba;s/\n\{2,\}$/\n/')

    # calculate text lenth and check overflow
    lenth=$(echo "$text" | wc -c)
    if [ $lenth -gt $max_lenth ]; then
        echo "text lenth($lenth) exceeds the maximum limit($max_lenth)!"
        return 2
    fi

    # encode text and send osc52 escape sequence to remote termial
    echo -ne "${osc52_prefix}$(echo "$text" | base64 | tr -d '\r\n')${osc52_suffix}"
}

# main body

# If not running interactively, don't do anything
case $- in
    *i*) ;;
    *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history lenth see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
test -x /usr/bin/lesspipe && eval "$(SHELL=/bin/sh lesspipe)"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# If this is an xterm set the title to 'user@host: dir'
case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;\u@\h: \w\a\]$PS1";;
    *) ;;
esac

# set PS1 comman prompt with the color settings
if [ "$color_prompt" = yes ]; then
    PROMPT_COMMAND='
    if [ $? -ne 0 ]; then
        PS1="\[\033[01;31m\]x\[\033[00m\] \[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;34m\]\w\[\033[00m\]\033[01;36m $(git_branch)\[\033[00m\]\n$(check_root) "
    else
        PS1="\[\033[01;36m\]o\[\033[00m\] \[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;34m\]\w\[\033[00m\]\033[01;36m $(git_branch)\[\033[00m\]\n$(check_root) "
    fi
    '
else
    PROMPT_COMMAND='
    if [ $? -ne 0 ]; then
        PS1="x \u@\h \w $(git_branch)\n$(check_root) "
    else
        PS1="o \u@\h \w $(git_branch)\n$(check_root) "
    fi
    '
fi
unset color_prompt force_color_prompt

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alhF'
alias la='ls -A'
alias l='ls -CF'

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history | tail -n1 | sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# override the default man pager with bat while bat is installed
# this will also set alias 'bat' to 'batcat' in the case that some distros
# like Arch Linux or Debian use 'batcat' as the binary name for bat
if \bat --version &> /dev/null || \batcat --version &> /dev/null; then
    BAT_EXEC=bat
    if ! \bat --version &> /dev/null; then
        BAT_EXEC=batcat
        alias bat=batcat
    fi
    export MANPAGER="sh -c 'awk '\''{ gsub(/\x1B\[[0-9;]*m/, \"\", \$0); gsub(/.\x08/, \"\", \$0); print }'\'' | ${BAT_EXEC} -p -lman'"
    unset BAT_EXEC
fi

# export functions or variables
export -f osc_yank
export VISUAL=vim
export EDITOR=vim

# User specific settings

